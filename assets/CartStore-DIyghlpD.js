import{K as n,L as e,M as h}from"./index-DxJcn1B2.js";const l=async r=>(await n.get(`${e}/carts/${r}`)).data||null,o=async r=>(await n.post(`${e}/carts/add`,r)).data,c=async(r,a)=>(await n.put(`${e}/carts/${r}`,a)).data;async function y(r){return await(await fetch(`${e}/carts/${r}`)).json()}const p=h("cart",{state:()=>({cart:null,loading:!1,error:null}),actions:{persistCart(r){localStorage.setItem("cartId",String(r.id)),localStorage.setItem("cartData",JSON.stringify(r))},async fetchCart(r){this.loading=!0;try{const a=localStorage.getItem("cartData");if(a){this.cart=JSON.parse(a);return}const s=localStorage.getItem("cartId"),t=s?await y(Number(s)):await l(r);this.cart=t,this.persistCart(t),console.log("Fetched cart:",this.cart)}catch(a){this.error=String(a)}finally{this.loading=!1}},async addToCart(r,a){this.loading=!0;try{if(!this.cart)try{const t=await l(r);t!=null&&t.id&&(this.cart=t,this.persistCart(t))}catch{const t=await o({userId:r,products:[a]});this.cart=t,this.persistCart(t);return}if(!this.cart){const t=await o({userId:r,products:[a]});this.cart=t,this.persistCart(t);return}const s=this.cart.products.find(t=>t.id===a.id);if(s){s.quantity+=a.quantity;const t=await c(this.cart.id,{merge:!0,products:this.cart.products.map(i=>({id:i.id,quantity:i.quantity}))});this.cart=t,this.persistCart(t)}else{const t=await o({userId:r,products:[a]});t.products&&Array.isArray(t.products)&&t.products.forEach(i=>{const d=this.cart.products.find(u=>u.id===i.id);d?d.quantity=i.quantity:this.cart.products.push({id:i.id,title:i.title,price:i.price,quantity:i.quantity,total:i.total,discountedTotal:i.discountedTotal,thumbnail:i.thumbnail})}),t.total!==void 0&&(this.cart.total=t.total),t.discountedTotal!==void 0&&(this.cart.discountedTotal=t.discountedTotal),t.totalProducts!==void 0&&(this.cart.totalProducts=t.totalProducts),t.totalQuantity!==void 0&&(this.cart.totalQuantity=t.totalQuantity),this.persistCart(this.cart)}}catch(s){console.error("Add to cart failed:",s),this.error=s.message}finally{this.loading=!1}},async updateCartQuantity(r){if(this.cart){this.loading=!0;try{const a=this.cart.products.find(t=>t.id===r.id);if(!a){console.warn(`Product with ID ${r.id} not found in cart.`);return}a.quantity=r.quantity;const s=await c(this.cart.id,{merge:!0,products:this.cart.products.map(t=>({id:t.id,quantity:t.quantity}))});this.cart=s,this.persistCart(s)}catch(a){console.error("Failed to update product quantity:",a),this.error=a.message}finally{this.loading=!1}}},async removeProduct(r){if(this.cart){this.loading=!0;try{const a=this.cart.products.findIndex(t=>t.id===r);a>=0&&this.cart.products.splice(a,1);const s=await c(this.cart.id,{merge:!0,products:this.cart.products.map(t=>({id:t.id,quantity:t.quantity}))});this.cart=s,this.persistCart(s)}catch(a){console.error("Failed to remove product:",a),this.error=a.message}finally{this.loading=!1}}},async checkout(){if(this.cart){this.loading=!0;try{this.cart=null,localStorage.removeItem("cartId"),localStorage.removeItem("cartData")}catch(r){this.error=String(r)}finally{this.loading=!1}}}}});export{p as u};
